import os
from absl.testing import absltest
from absl.testing import parameterized
import chex
import jax
import numpy as np
from xlron.environments.env_funcs import *
from xlron.environments.vone import *
from xlron.environments.rsa import *
from xlron.heuristics.heuristics import *
from xlron.environments.env_test import *

class KspffTest(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rsa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
        ("case_empty", jnp.array([0, 0, 1]),
         jnp.array([[0, 0, 0, 0],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0], ]),
         jnp.array(0)),
        ("case_full", jnp.array([0, 0, 1]),
         jnp.array([[1, 1, 1, 1],
                    [1, 1, 1, 1],
                    [1, 1, 1, 1],
                    [1, 1, 1, 1], ]),
         jnp.array(0)),
        ("case_start_edge", jnp.array([0, 0, 1]),
         jnp.array([[0, 1, 1, 1],
                    [0, 1, 1, 1],
                    [0, 1, 1, 1],
                    [0, 1, 1, 1], ]),
         jnp.array(0)),
        ("case_end_edge", jnp.array([0, 0, 1]),
         jnp.array([[1, 1, 1, 0],
                    [1, 1, 1, 0],
                    [1, 1, 1, 0],
                    [1, 1, 1, 0], ]),
         jnp.array(3)),
        ("case_ksp", jnp.array([0, 0, 1]),
         jnp.array([[1, 1, 1, 0],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1], ]),
         jnp.array(3)),
    )
    def test_ksp_ff(self, request_array, link_slot_array, expected):
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        action = self.variant(ksp_ff, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_empty", jnp.array([0, 0, 1]),
     jnp.array([[0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                ]),
     jnp.array(0)),
    ("case_full", jnp.array([0, 0, 1]),
     jnp.array([[1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1], ]),
     jnp.array(0)),
    ("case_start_edge", jnp.array([0, 0, 1]),
     jnp.array([[0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,]]),
     jnp.array(0)),
    ("case_end_edge", jnp.array([0, 0, 1]),
     jnp.array([[1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                ]),
     jnp.array(3)),
    ("case_ff", jnp.array([0, 0, 1]),
     jnp.array([[1, 1, 1, 0],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                ]),
     jnp.array(3)),
    )
    def test_ksp_ff_nsfnet(self, request_array, link_slot_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rsa_nsfnet_4_test_setup()
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        action = self.variant(ksp_ff, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)


class FfkspTest(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rsa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
        ("case_empty", jnp.array([0, 0, 1]),
         jnp.array([[0, 0, 0, 0],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0], ]),
         jnp.array(0)),
        ("case_full", jnp.array([0, 0, 1]),
         jnp.array([[1, 1, 1, 1],
                    [1, 1, 1, 1],
                    [1, 1, 1, 1],
                    [1, 1, 1, 1], ]),
         jnp.array(0)),
        ("case_start_edge", jnp.array([0, 0, 1]),
         jnp.array([[0, 1, 1, 1],
                    [0, 1, 1, 1],
                    [0, 1, 1, 1],
                    [0, 1, 1, 1], ]),
         jnp.array(0)),
        ("case_end_edge", jnp.array([0, 0, 1]),
         jnp.array([[1, 1, 1, 0],
                    [1, 1, 1, 0],
                    [1, 1, 1, 0],
                    [1, 1, 1, 0], ]),
         jnp.array(3)),
        ("case_ff", jnp.array([0, 0, 1]),
         jnp.array([[1, 1, 1, 0],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1], ]),
         jnp.array(4)),
    )
    def test_ff_ksp(self, request_array, link_slot_array, expected):
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        action = self.variant(ff_ksp, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_empty", jnp.array([0, 0, 1]),
     jnp.array([[0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                ]),
     jnp.array(0)),
    ("case_full", jnp.array([0, 0, 1]),
     jnp.array([[1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],]),
     jnp.array(0)),
    ("case_start_edge", jnp.array([0, 0, 1]),
     jnp.array([[0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1, ],
                [0, 1, 1, 1,]]),
     jnp.array(0)),
    ("case_end_edge", jnp.array([0, 0, 1]),
     jnp.array([[1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                ]),
     jnp.array(3)),
    ("case_ff", jnp.array([0, 0, 1]),
     jnp.array([[1, 1, 1, 0],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                ]),
     jnp.array(4)),
    )
    def test_ff_ksp_nsfnet(self, request_array, link_slot_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rsa_nsfnet_4_test_setup()
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        action = self.variant(ff_ksp, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)


class FfkspTestRWALightpathReuse(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rsa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_empty", jnp.array([0, 0, 1]),
     jnp.array([[-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                ]),
     jnp.array([[1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(0)),
    ("case_full", jnp.array([0, 0, 1]),
     jnp.array([[99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                ]),
     jnp.array([[0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.], ]),
     jnp.array(0)),
    ("case_start_edge", jnp.array([0, 0, 1]),
     jnp.array([[-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                ]),
     jnp.array([[1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(0)),
    ("case_end_edge", jnp.array([0, 0, 1]),
     jnp.array([[99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                ]),
     jnp.array([[0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.], ]),
     jnp.array(3)),
    ("case_reuse_lightpath", jnp.array([0, 0, 1]),
     jnp.array([[0, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                ]),
     jnp.array([[1000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(0)),
    ("case_dont_reuse_lightpath", jnp.array([0, 0, 1]),
     jnp.array([[1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                ]),
     jnp.array([[1000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(4)),
    )
    def test_ff_ksp_rwa_lightpath_reuse(self, request_array, path_index_array, link_capacity_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rwa_lightpath_reuse_4_nsfnet_test_setup()
        self.state = self.state.replace(request_array=request_array,
                                        path_index_array=path_index_array,
                                        link_capacity_array=link_capacity_array)
        jax.debug.print("path_index_array initial {}", self.state.path_index_array, ordered=True)
        jax.debug.print("link_capacity_array initial {}", self.state.link_capacity_array, ordered=True)
        action = self.variant(ff_ksp, static_argnums=(1,))(self.state, self.params)
        # step env
        obs, self.state, reward, done, info = self.variant(self.env.step, static_argnums=(3,))(
            self.key, self.state, action, self.params
        )
        jax.debug.print("path_index_array after {}", self.state.path_index_array, ordered=True)
        jax.debug.print("link_capacity_array after {}", self.state.link_capacity_array, ordered=True)
        chex.assert_trees_all_close(action, expected)


class KspFFTestRWALightpathReuse(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rsa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_empty", jnp.array([0, 0, 1]),
     jnp.array([[-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                ]),
     jnp.array([[1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(0)),
    ("case_full", jnp.array([0, 0, 1]),
     jnp.array([[99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                ]),
     jnp.array([[0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.], ]),
     jnp.array(0)),
    ("case_start_edge", jnp.array([0, 0, 1]),
     jnp.array([[-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                ]),
     jnp.array([[1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(0)),
    ("case_end_edge", jnp.array([0, 0, 1]),
     jnp.array([[99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                ]),
     jnp.array([[0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.], ]),
     jnp.array(3)),
    ("case_reuse_lightpath", jnp.array([0, 0, 1]),
     jnp.array([[99, 99, 0, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                ]),
     jnp.array([[1000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(2)),
    ("case_dont_reuse_lightpath", jnp.array([0, 0, 1]),
     jnp.array([[1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                ]),
     jnp.array([[1000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(1)),
    )
    def test_ksp_ff_rwa_lightpath_reuse(self, request_array, path_index_array, link_capacity_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rwa_lightpath_reuse_4_nsfnet_test_setup()
        self.state = self.state.replace(request_array=request_array,
                                        path_index_array=path_index_array,
                                        link_capacity_array=link_capacity_array)
        jax.debug.print("path_index_array initial {}", self.state.path_index_array, ordered=True)
        jax.debug.print("link_capacity_array initial {}", self.state.link_capacity_array, ordered=True)
        action = self.variant(ksp_ff, static_argnums=(1,))(self.state, self.params)
        # step env
        obs, self.state, reward, done, info = self.variant(self.env.step, static_argnums=(3,))(
            self.key, self.state, action, self.params
        )
        jax.debug.print("path_index_array after {}", self.state.path_index_array, ordered=True)
        jax.debug.print("link_capacity_array after {}", self.state.link_capacity_array, ordered=True)
        chex.assert_trees_all_close(action, expected)


if __name__ == '__main__':
    # Set the number of (emulated) host devices
    num_devices = 4
    os.environ['XLA_FLAGS'] = f"--xla_force_host_platform_device_count={num_devices}"
    jax.config.update('jax_numpy_rank_promotion', 'raise')
    absltest.main()
